[user]
	name = Harris Enniss
	email = henniss@transphormusa.com
[alias]
        # Create an annotated tag representing a new version name.
        ver = "!ver(){ git tag -a -m \"$1\" $@; }; ver"

        # Various log commands.
        ll = "log --graph --oneline --decorate"
        lga = "!git ll --all"

        # Get the name of the closest parent tag, or the root if no
        # parent tag available.
        last-tag = describe --abbrev=0 --always
        # Get the all 'root' parents (those with no parents of their own)
        root = "!git rev-list --max-parents=0 $(git rev-parse --default HEAD $@)"

        # Log only up to the anchor.

        # We need special handling for the case where HEAD is the
        # anchor commit, since --not HEAD would give us an empty set
        # of commits.

        # --not $anchor --not is needed so that any extra arguments
        # passed don't get applied with ^ inverted.
        lgt = "!f(){ anchor=$(git rev-list -n 1 $(git last-tag)); head=$(git rev-list -n 1 HEAD); if [[ $head = $anchor ]]; then git ll --boundary -1 \"$@\" ; else git ll --boundary HEAD --not $anchor --not \"$@\"; fi; }; f"
        
        # Follow a single file.
        follow = "!follow(){ git log -p -M --follow --stat \"${@:2}\" -- $1; }; follow"

        # Checkout next commit on path to $1
        next = "!f(){ echo \"Advancing towards ${1:-${GIT_LAST:-master}}\"; git checkout $(git rev-list HEAD..$(git rev-parse --default ${GIT_LAST:-master} $1 ) | tail -1); }; f"

        # Never ever ever use --force
	fpush = push --force-with-lease

        amend = commit --amend
	fixup = commit --fixup
        fa = fetch --all
        detach = checkout --detach

        # Push the current branch to a new remote branch.
	upush = push --set-upstream origin HEAD

        # List branches that have been merged into master.
        bclean = "!git branch --merged master | egrep -v \"(^\\*|master)\" "

        # Diff index against commit.
	idiff = diff --cached
        # Diff against merge-base with master. 
        rdiff = "!f(){ sha=$(git rev-parse --default HEAD $1); git diff $(git merge-base master $sha); }; f"

        # Delete current branch and detach.
        deleteme = "! branch=$(git rev-parse --abbrev-ref HEAD); git checkout --detach; git branch -D $branch"
        
        # Fetch merge request id $2 from remote $1.
        # (Lets you checkout out a MR without having to `remote add` the source repo.)
        mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -

        # Safer version of reset --hard. Contents are still available through reflog
        wipe = !git add -A && git commit -qnm 'WIPE SAVEPOINT' && git reset HEAD~ --hard
[core]
	autocrlf = input
	editor = emacs -Q -nw
	excludesfile = ~/.gitignore_global
[apply]
	whitespace = fix
[rebase]
	autosquash = true
	stat = False
	missingCommitsCheck = warn
[diff]
	algorithm = patience
[merge]
	defaultToUpstream = true
[branch]
	autosetupmerge = true
[rerere]
	enabled = false
[advice]
	detachedHead = false
[fetch]
	prune = true

